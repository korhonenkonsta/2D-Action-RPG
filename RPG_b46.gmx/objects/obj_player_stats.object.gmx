<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player's stats
hp = 500;
maxhp = hp;
prevhp = hp;

mana = 300;
maxmana = mana;
prevmana = mana;

stamina = 400;
maxstamina = stamina;
prevstamina = stamina;

attack = 1;
expr = 0;
maxexpr = 4;
level = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the stats 

if (prevhp &gt; hp) prevhp -= 2;
if (hp &gt; prevhp) prevhp = hp;
    
if instance_exists(obj_player){
    // Hp
    if (hp &lt; 0) hp = 0;
    
    
    
    // Mana
    
    
    // Stamina
    if (stamina &lt; maxstamina and obj_player.state == scr_move_state) stamina += 2;
    if (stamina &lt; maxstamina and obj_player.state == scr_idle_state) stamina += 2;
    if (stamina &gt; maxstamina) stamina = maxstamina;
    if (stamina &lt; maxstamina and obj_player.state == scr_block_state) stamina += 1;
    
    
    if (prevstamina &gt; stamina) prevstamina -= 2;
    if (stamina &gt; prevstamina) prevstamina = stamina;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD
display_set_gui_size(640,360);

// Draw stat bars

// Backgrounds
draw_sprite_ext(spr_bar_background,1,32,32,maxhp/2000,1,0,c_white,1);
draw_sprite_ext(spr_bar_background,1,32,48,maxmana/2000,1,0,c_white,1);
draw_sprite_ext(spr_bar_background,1,32,64,maxstamina/2000,1,0,c_white,1);

// Drain
if (prevhp &gt; 0) {
    draw_sprite_ext(spr_drainbar_inner,1,32,32,prevhp/2000,1,0,c_white,1);
}

if (prevstamina &gt; 0) {
    draw_sprite_ext(spr_drainbar_inner,1,32,64,prevstamina/2000,1,0,c_white,1);
}
    
// Bars
if (hp &gt; 0) {
    draw_sprite_ext(spr_healthbar_inner,1,32,32,hp/2000,1,0,c_white,1);
}

if (mana &gt; 0) {
    draw_sprite_ext(spr_manabar_inner,1,32,48,mana/2000,1,0,c_white,1);
}

if (stamina &gt; 0) {
    draw_sprite_ext(spr_staminabar_inner,1,32,64,stamina/2000,1,0,c_white,1);
}


// Draw the stat texts
draw_set_font(fnt_one);
draw_set_colour(c_white);
draw_text(32,32, "HP:"+string(hp) + '/' + string(maxhp));
draw_text(32,48, "MANA:"+string(mana) + '/' + string(maxmana));
draw_text(32,64, "STAMINA:"+string(stamina) + '/' + string(maxstamina));
draw_text(32,80, "LEVEL:"+string(level));

if (instance_exists(obj_player)) {
    draw_text(32,96, "DIR:"+string(obj_player.dir));
    draw_text(32,112, "LEN:"+string(obj_player.len));
    draw_text(32,128, "STATE:"+string(obj_player.state));
    draw_text(32,144, "SPRITE INDEX:"+string(obj_player.sprite_index));
    
    if (obj_view.x &lt;= view_wview[0]/2 and obj_view.y &gt;= room_height-view_hview[0]/2 or
    obj_view.x &lt;= view_wview[0]/2 and obj_view.y &lt;= view_hview[0]/2 or
    obj_view.x &gt;= room_width-view_wview[0]/2 and obj_view.y &gt;= room_height-view_hview[0]/2 or
    obj_view.x &gt;= room_width-view_wview[0]/2 and obj_view.y &lt;= view_hview[0]/2){
        draw_text(32,160, "SUB PIXEL:"+string("NOT ACTIVE"));
    }else{
        draw_text(32,160, "SUB PIXEL:"+string("ACTIVE"));
    }
    
    draw_text(32,176, "VIEW X:"+string(obj_view.x));
    draw_text(32,192, "VIEW Y:"+string(obj_view.y));
    draw_text(32,208, "TEST:"+string(room_width-view_wview[0]/2));
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
